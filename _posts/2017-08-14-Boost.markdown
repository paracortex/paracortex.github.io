---
layout: post
title: Boost
date: 2017-08-14 00:09:24.000000000 +09:00
---

#### RAII，函数对象，或是谓词
RAII
new申请了内存空间，但是却也经常忘记delete回收申请的空间，容易造成内存溢出，于是RAII技术就诞生了

出栈或退栈，它是把栈顶元素删除掉

栈是限定仅在表头进行插入和删除操作的线性表

但读取栈中的数据是随便的没有接口约束之说

pipeline。CPU读取栈指令

catch子句。首先检查throw本身是否在try块内部，找到一个可以处理该异常的catch。这个过程称为栈展开（stack unwinding

在栈展开的过程中，会释放局部对象所占用的内存并运行类类型局部对象的析构函数。但需要注意的是，如果一个块通过new动态分配内存，并且在释放该资源之前发生异常，该块因异常而退出，那么在栈展开期间不会释放该资源，编译器不会删除该指针，这样就会造成内存泄露

在为某个异常进行栈展开的时候，析构函数如果又抛出自己的未经处理的另一个异常，将会导致调用标准库terminate函数。通常terminate函数将调用abort函数，导致程序的非正常退出。所以析构函数应该从不抛出异常。

不能不处理异常。如果找不到匹配的catch，程序就会调用库函数terminate

当程序运行时，每一个函数（包括数据、寄存器、程序计数器，等等）在调用时，都被映射到栈上。这就是 stack winding。

Unwinding 是以相反顺序把函数从栈上移除的过程。

可见 stack unwinding 的过程中，局部对象的析构函数将逐一被调用。这也就是 RAII 工作的原理，它是由语言和编译器来保证的。

RAII 的一般做法是这样的：在对象构造时获取资源，接着控制对资源的访问使之在对象的生命周期内始终保持有效，最后在对象析构的时候释放资源。借此，我们实际上把管理一份资源的责任托管给了一个存放在栈空间上的局部对象。

字符型char只占八位，存储ascii码的，而宽字符型是为了存储多国语言的代码unicode

如 L"我的字符串" 表示将ANSI字符串转换成unicode的字符串，就是每个字符占用两个字节
```bash
strlen("asd") = 3;   
strlen(L"asd") = 6

```
T宏可以把一个引号引起来的字符串，根据你的环境设置，使得编译器会根据编译目标环境选择合适的（Unicode还是ANSI）字符处理方式
```bash
TCHAR szStr1[] = TEXT("str1");   
char szStr2[] = "str2";   
WCHAR szStr3[] = L("str3");   
```
那么第一句话在定义了UNICODE时会解释为第三句话，没有定义时就等于第二句话。   
但二句话无论是否定义了UNICODE都是生成一个ANSI字符串，而第三句话总是生成UNICODE字符串。
```bash
ifdef UNICODE
define CreateFile CreateFileW
else
define CreateFile CreateFileA
endif // !UNICODE
-------------
int* p1 = &arr[0];           // 取得数组中元素的地址，赋值给指针
int* p2 = &arr[3];
ptrdiff_t diff = p2 - p1;

```
指针的减法可以计算两个指针之间相隔的元素个数

STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。

STL是一些“容器”的集合，这些“容器”有list,vector,set,map等

STL可分为容器(containers)、迭代器(iterators)、空间配置器(allocator)、配接器(adapters)、算法(algorithms)、仿函数(functors)六个部分。

```bash

<vector>,<list>,<deque>,<set>,<map>,<stack>和<queue>

```
迭代器部分主要由头文件
```bash

<utility>,<iterator>和<memory>组成。<utility>是一个很小的头文件，<memory>中的主要部分是模板类allocator，它负责产生所有容器中的默认分配器。


算法部分主要由头文件<algorithm>，<numeric>和<functional>组成。<algorithm>是所有STL头文件中最大的一个

<numeric>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<functional>中则定义了一些模板类，用以声明函数对象
```
size_t是全局定义的类型；size_type是STL类中定义的类型属性，用以保存任意string和vector类对象的长度

size_type一般也是unsigned int


在用下标访问元素时，vector使用vector::size_type作为下标类型，而数组下标的正确类型则是size_t

使用size_t可能会提高代码的可移植性、有效性或者可读性，或许同时提高这三者。

size_t的定义在
```bash
<stddef.h>, <stdio.h>, <stdlib.h>, <string.h>, <time.h>和<wchar.h>
```
这些标准C头文件中，也出现在相应的C++头文件, 等等中，你应该在你的头文件中至少包含一个这样的头文件在使用size_t之前。

适当地使用size_t还会使你的代码变得如同自带文档。当你看到一个对象声明为size_t类型，你马上就知道它代表字节大小或数组索引，而不是错误代码或者是一个普通的算术值。

delete[]  删除数组内存。简单数组使用效果相同，类不同。

 delete[]   rg   用来释放rg指向的内存，！！还逐一调用数组中每个对象的destructor

 类没有使用操作系统的系统资源（比如：Socket、File、Thread等），所以不会造成明显恶果

 RAII的实现原理很简单，利用stack上的临时对象生命期是程序自动管理的这一特点，将我们的资源释放操作封装在一个临时对象中。

 显式构造方法就是你自己编写的构造方法，隐式构造方法就是系统缺省的构造的方法，不用你自己写

比如你创建了一个类People的示例对象，但是这个类中并未有构造方法，而你直接用 new People()来初始化了这个对象，而实际上，你并没有编写People这个构造方法
```bash
    cout << A.isSameISBN(B) << endl;   //正经地进行比较，无需发生转换

    cout<< A.isSameISBN(string("A-A-A"))<< endl; //此处即发生一个隐式转换：string类型-->BOOK类型，借助BOOK的构造函数进行转换，以满足isSameISBN函数的参数期待。
    cout << A.isSameISBN(BOOK("A-A-A")) << endl;    //显式创建临时对象，也即是编译器干的事情。

    BOOK(string ISBN,float price=0.0f):_bookISBN(ISBN),_price(price){}
    bool isSameISBN(const BOOK & other ){


```

代码中可以看到，isSameISBN函数是期待一个BOOK类类型形参的，但我们却传递了一个string类型的给它，这不是它想要的啊！还好，BOOK类中有个构造函数，它使用

一个string类型实参进行调用，编译器调用了这个构造函数，隐式地将stirng类型转换为BOOK类型（构造了一个BOOK临时对象），再传递给isSameISBN函数。


隐式类类型转换还是会带来风险的，正如上面标记，隐式转换得到类的临时变量，完成操作后就消失了，我们构造了一个完成测试后被丢弃的对象。
```bash
explicit BOOK(string ISBN,float price=0.0f):_bookISBN(ISBN),_price(price){}

```

explicit关键字只能用于类内部的构造函数声明上.这样一来，BOOK类构造函数就不能用于隐式地创造对象了，编译上面的代码会出现这样的提示：

隐式类类型转换容易引起错误，除非你有明确理由使用隐式类类型转换，否则，将可以用一个实参进行调用的构造函数都声明为explicit

explicit只能用于类内部构造函数的声明。它虽然能避免隐式类型转换带来的问题，但需要用户能够显式创建临时对象（对用户提出了要求）
```bash
template<typename T>  
```
然后下面类的定义中可以使用T为传入参数。

函数对象
