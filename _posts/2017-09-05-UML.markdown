---
layout: post
title: UML
date: 2017-09-05 00:09:24.000000000 +09:00
---

#### UML团队开发流程与管理（第2版） 赖信仁
## 开始阶段   

1 项目的范围：先找出目前已存在的系统【已知的接口，可用的部分】

2 必要的”业务流程【检查流程】 避免对细节

3 技术限制：包括使用的技术以及其他系统间的交流接口规范【无】

4 成功关键因素 最关切的问题是什么【fancy + 流畅完成的主业务流】

## 需求分析

Eriksson-Penker业务扩展模型 ->官网

业务过程建模标注（BPMN）Business Process Modeling Notation，业务过程图（BPD）

luoo 听完了。。。945

用户调用系统，系统调用采集模块，采集模块调用采集卡，等等。 顺序图，类图。
写uml就是在写文档。它对编程有更好的直接的映射关系。

从用例的角度，去抽象问题。分析参与者的目的。

业务实体，往往对应类。

分包，高内聚，松耦合。双向依赖，循环依赖都是不好的分包。

边界类？用来封装门面？

控制类，源于用例的动词。在业务逻辑层

以上是分析类，设计类可以直接映射代码了。

关联关系是静态的，属性级别的。依赖是动态的，临时的，随场景变换的。关联的部分，由外部去调用。

杜绝双向依赖。

包含关系是必须，验证账号与取钱。

聚合，组织没了，人员健在。

询问状态机

架构是分层，框架是软件。

音乐特别lowfi
------------------------------------------------
UMl 有行为图，部署图。
行为图有动态图，静态图。

动态： 交互：时序（时间消息） 协作（组织关系）
      动作：状态（控制器）   流程（操作流）
静态： 用例图：角色和用例、功能
      包图：子系统，组件、构件
      类图：主要，分（边界类、控制类、实体类）
      对象图

部署：软件依赖（DB,DLL,File,Lib），硬件依赖(采集卡，板卡，计算机)
------------------------------------------------
瀑布模型：
1 问题定义  功能
2 可行性分析 市场，技术
3 需求分析  功能->用例图
4 概要设计  用例图->UI方案 + 大致分包（子系统，类模块，分工程）
5 详细设计  概要->(实体类 + 控制类)->封装复用分析->（边界类 + 实体类 + 控制类）
6 代码实现  契合设计 + 资源利用
7 测试
8 维护
